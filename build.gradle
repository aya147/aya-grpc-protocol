plugins {
    id 'java'
    id 'java-library'
    id("com.google.protobuf") version "0.9.4"
}

group = 'com.aya'
version = '1.0.0'

ext {
    grpcVersion = '1.63.0'
    protocVersion = '3.25.1'
    grpcStarterVersion = '3.1.0.RELEASE'
}

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    // grpc
    api "net.devh:grpc-spring-boot-starter:${grpcStarterVersion}"
    annotationProcessor "io.grpc:protoc-gen-grpc-java:${grpcVersion}" // gRPC Java 代码生成器
    // java17没有的api
    api 'javax.annotation:javax.annotation-api:1.3.2'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        ofSourceSet("main").forEach { task ->
            task.builtins {
                java {}
            }
            task.plugins {
                grpc {}
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDirs = ['src/main/java/com/aya/common/openapi', 'src/main/java/com/aya/user/openapi']
            include '**/*.proto'
        }
    }
}

tasks.named('processResources') {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    filesMatching('**/*.proto') {
        // 这里可以添加特定的处理逻辑
    }
}

jar {
    // 处理所有位于特定目录下的 .proto 文件
    fileTree('src/main/java/com/aya').matching {
        include '**/openapi/*.proto'
    }.visit { FileVisitDetails fvd ->
        from(fvd.file.parent) {
            include '*.proto'
            // 将文件放到与其包结构相对应的目录中
            into "com/aya/${fvd.relativePath.parent}"
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        // 第一个本地仓库：用于 Gradle
        maven {
            name = 'localGradleRepo'
            // MyGradleRepository 为本地仓库的目录
            url = uri("file:///D:/DevelopEnvironment/gradleRepository")
        }
        // 第二个本地仓库：用于 Maven
        maven {
            name = 'localMavenRepo'
            // MyGradleRepository 为本地仓库的目录
            url = uri("file:///D:/DevelopEnvironment/respository")
        }
    }
}

